--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:04:25:18:06:29:SJ cbx_lpm_add_sub 2017:04:25:18:06:29:SJ cbx_lpm_compare 2017:04:25:18:06:29:SJ cbx_lpm_decode 2017:04:25:18:06:29:SJ cbx_mgl 2017:04:25:18:09:28:SJ cbx_nadder 2017:04:25:18:06:30:SJ cbx_stratix 2017:04:25:18:06:30:SJ cbx_stratixii 2017:04:25:18:06:30:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_19a
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1364w[1..0]	: WIRE;
	w_anode1373w[3..0]	: WIRE;
	w_anode1390w[3..0]	: WIRE;
	w_anode1400w[3..0]	: WIRE;
	w_anode1410w[3..0]	: WIRE;
	w_anode1420w[3..0]	: WIRE;
	w_anode1430w[3..0]	: WIRE;
	w_anode1440w[3..0]	: WIRE;
	w_anode1450w[3..0]	: WIRE;
	w_anode1462w[1..0]	: WIRE;
	w_anode1469w[3..0]	: WIRE;
	w_anode1480w[3..0]	: WIRE;
	w_anode1490w[3..0]	: WIRE;
	w_anode1500w[3..0]	: WIRE;
	w_anode1510w[3..0]	: WIRE;
	w_anode1520w[3..0]	: WIRE;
	w_anode1530w[3..0]	: WIRE;
	w_anode1540w[3..0]	: WIRE;
	w_data1362w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode1540w[3..3], w_anode1530w[3..3], w_anode1520w[3..3], w_anode1510w[3..3], w_anode1500w[3..3], w_anode1490w[3..3], w_anode1480w[3..3], w_anode1469w[3..3]), ( w_anode1450w[3..3], w_anode1440w[3..3], w_anode1430w[3..3], w_anode1420w[3..3], w_anode1410w[3..3], w_anode1400w[3..3], w_anode1390w[3..3], w_anode1373w[3..3]));
	w_anode1364w[] = ( (w_anode1364w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1373w[] = ( (w_anode1373w[2..2] & (! w_data1362w[2..2])), (w_anode1373w[1..1] & (! w_data1362w[1..1])), (w_anode1373w[0..0] & (! w_data1362w[0..0])), w_anode1364w[1..1]);
	w_anode1390w[] = ( (w_anode1390w[2..2] & (! w_data1362w[2..2])), (w_anode1390w[1..1] & (! w_data1362w[1..1])), (w_anode1390w[0..0] & w_data1362w[0..0]), w_anode1364w[1..1]);
	w_anode1400w[] = ( (w_anode1400w[2..2] & (! w_data1362w[2..2])), (w_anode1400w[1..1] & w_data1362w[1..1]), (w_anode1400w[0..0] & (! w_data1362w[0..0])), w_anode1364w[1..1]);
	w_anode1410w[] = ( (w_anode1410w[2..2] & (! w_data1362w[2..2])), (w_anode1410w[1..1] & w_data1362w[1..1]), (w_anode1410w[0..0] & w_data1362w[0..0]), w_anode1364w[1..1]);
	w_anode1420w[] = ( (w_anode1420w[2..2] & w_data1362w[2..2]), (w_anode1420w[1..1] & (! w_data1362w[1..1])), (w_anode1420w[0..0] & (! w_data1362w[0..0])), w_anode1364w[1..1]);
	w_anode1430w[] = ( (w_anode1430w[2..2] & w_data1362w[2..2]), (w_anode1430w[1..1] & (! w_data1362w[1..1])), (w_anode1430w[0..0] & w_data1362w[0..0]), w_anode1364w[1..1]);
	w_anode1440w[] = ( (w_anode1440w[2..2] & w_data1362w[2..2]), (w_anode1440w[1..1] & w_data1362w[1..1]), (w_anode1440w[0..0] & (! w_data1362w[0..0])), w_anode1364w[1..1]);
	w_anode1450w[] = ( (w_anode1450w[2..2] & w_data1362w[2..2]), (w_anode1450w[1..1] & w_data1362w[1..1]), (w_anode1450w[0..0] & w_data1362w[0..0]), w_anode1364w[1..1]);
	w_anode1462w[] = ( (w_anode1462w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1469w[] = ( (w_anode1469w[2..2] & (! w_data1362w[2..2])), (w_anode1469w[1..1] & (! w_data1362w[1..1])), (w_anode1469w[0..0] & (! w_data1362w[0..0])), w_anode1462w[1..1]);
	w_anode1480w[] = ( (w_anode1480w[2..2] & (! w_data1362w[2..2])), (w_anode1480w[1..1] & (! w_data1362w[1..1])), (w_anode1480w[0..0] & w_data1362w[0..0]), w_anode1462w[1..1]);
	w_anode1490w[] = ( (w_anode1490w[2..2] & (! w_data1362w[2..2])), (w_anode1490w[1..1] & w_data1362w[1..1]), (w_anode1490w[0..0] & (! w_data1362w[0..0])), w_anode1462w[1..1]);
	w_anode1500w[] = ( (w_anode1500w[2..2] & (! w_data1362w[2..2])), (w_anode1500w[1..1] & w_data1362w[1..1]), (w_anode1500w[0..0] & w_data1362w[0..0]), w_anode1462w[1..1]);
	w_anode1510w[] = ( (w_anode1510w[2..2] & w_data1362w[2..2]), (w_anode1510w[1..1] & (! w_data1362w[1..1])), (w_anode1510w[0..0] & (! w_data1362w[0..0])), w_anode1462w[1..1]);
	w_anode1520w[] = ( (w_anode1520w[2..2] & w_data1362w[2..2]), (w_anode1520w[1..1] & (! w_data1362w[1..1])), (w_anode1520w[0..0] & w_data1362w[0..0]), w_anode1462w[1..1]);
	w_anode1530w[] = ( (w_anode1530w[2..2] & w_data1362w[2..2]), (w_anode1530w[1..1] & w_data1362w[1..1]), (w_anode1530w[0..0] & (! w_data1362w[0..0])), w_anode1462w[1..1]);
	w_anode1540w[] = ( (w_anode1540w[2..2] & w_data1362w[2..2]), (w_anode1540w[1..1] & w_data1362w[1..1]), (w_anode1540w[0..0] & w_data1362w[0..0]), w_anode1462w[1..1]);
	w_data1362w[2..0] = data_wire[2..0];
END;
--VALID FILE
